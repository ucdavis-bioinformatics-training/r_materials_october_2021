[["index.html", "Troubleshooting Introduction About this course R RStudio", " Troubleshooting UC Davis Bioinformatics Core 10/21/2021 Introduction Get off to a good start in bioinformatics with this three-part online workshop in R. This workshop lays the foundation or successful bioinformatics experiments, including RNA-Seq, single cell RNA-Seq, epigenetics, and more. The three three-hour sessions combine lecture and exercises in a survey of the basics of R for bioinformatics. Completion of this material will allow participants to get the most out of our other experiment-centric workshops. We recommend this course of all beginners. About this course This course will focus primarily on the practical use of R, rather than it’s theoretical foundations. However, the fundamentals of programming are critical to any deeper understanding of R. As we come to each new concept, we will pause to explore and discuss. R R is a language and environment for statistical computing and graphics developed in the early 1990s. It provides a wide variety of statistical and graphical techniques, including linear and nonlinear modeling, statistical tests, time series analysis, classification, and clustering, among many others. R: Is free! Is open source and highly extensible, meaning that the user community can (and does) write new R tools Makes publication quality figures, including mathematical symbols and formulae Compiles and runs on Windows, MacOS, and a wide variety of UNIX and Linux systems Has a large and active user community There are many ways to use R: from the command line, from a script, or in a graphical interface, like RStudio. RStudio RStudio is an integrated development environment (IDE), which offers: Syntax highlighting Code completion Smart indentation Workspace browser Data viewer Embedded plots Notebooks that generate PDF or HTML results Package management The team behind RStudio are also the authors of a suite of R packages for data science and visualization collectively known as the “tidyverse.” We will be using their extremely popular plotting package, ggplot2, as well as a few other packages from the tidyverse suite later in this course. "],["rstudio-and-r-notebooks.html", "1 RStudio and R notebooks 1.1 RStudio 1.2 R notebooks", " 1 RStudio and R notebooks Let’s get started! Launch RStudio. 1.1 RStudio As mentioned above RStudio is a very nice, but optional, IDE for R. All of the code for this course will work just as well on the command line, but RStudio provides a number of features that improve the experience of learning to the basics of R. Your RStudio window should look something like this: On the left hand side is the console. This is a command-line interface for R; you type a command, press enter to run it, and the result will appear below. Running a simple command In R the prompt is a &gt; character. When you see this character at the beginning of the line in your console, it means that R is waiting for you to type your next command. An incomplete command If you press enter before finishing a command, the next line will begin with a + character. This lets you know that R is expecting more input. On the right hand side, are the workspace (or environment) browser and the plots / help pane. The workspace browser shows the objects present in the environment. Currently there are none. Assigning output If we store the result of our addition in a variable using &lt;-, the result is not printed to the console. Workspace browser Instead, a new value appears in the workspace browser. Evaluating a variable The value of the variable a is the result of the addition operation 1 + 1. When typed into the console, the variable is evaluated, and R returns its value, 2. The &lt;- character pair, which looks like a left-pointing arrow, is one of two assignment operators in R. In most situations, it is equivalent to the = character. The lower right pane contains the file browser, plot viewer, and help documentation, which we will be using frequently. 1.2 R notebooks Create a new R notebook using the menu bar at the top: File &gt; New File &gt; R Notebook. A fourth pane will open up containing a template R notebook. It should look something like this: An R Notebook R notebooks are a special type of markdown document incorporating executable R code chunks and their output, along with text that can be formatted using special characters to encode formatting like headings, bold or italic fonts, bullet points, links, and more. Markdown is designed to be readable as-is, but it can be converted to PDF or HTML. Using an R notebook keeps any commentary, code, and figures for a project in one place, and makes it easy to generate a nicely formatted report. This web page is the product of an R notebook! New chunks are added by clicking the Insert Chunk button on the toolbar or by pressing Ctrl+Alt+I on Windows, or Cmd+Option+I on Mac. Code chunks are executed by clicking the Run button within the chunk or by placing your cursor inside it and pressing Ctrl+Shift+Enter on Windows, or Cmd+Shift+Enter on Mac. You can run a single line of code by placing your cursor anywhere on the line and pressing Ctrl+Enter on Windows, or Cmd+Enter on Mac. Create and run a new chunk with the following code: 2 + 2 b &lt;- 3 + 3 What happened? Where did the output for each line of code go? "],["importing-and-exporting-data.html", "2 Importing and exporting data", " 2 Importing and exporting data Manual data entry is time-consuming and leads to errors. R has a number of functions for reading data in a variety of formats. Let’s use the read.csv() function to read in a spreadsheet containing data from an experiment. birthweight &lt;- read.csv(&quot;datasets/birthweight.csv&quot;) CSV stands for “comma separated value,” and the CSV file is simply a text file where each row in the file represents a row in the data table, and the columns are separated by commas. The contents of the CSV file are now stored in the variable “birthweight.” If we wanted to write the contents of the birthweight object to a new CSV, we can use the write.csv() function instead. write.csv(birthweight, file = &quot;datasets/new_birthweight.csv&quot;) The similar read.delim() and write.delim() can be used to read and write tab-delimited files, where columns are separated by tab characters rather than commas. "],["data-frames.html", "3 Data frames 3.1 Structure of a data frame 3.2 Selecting a single column using the $ and [[ operators 3.3 Selecting a subset of the data frame using the [ operator", " 3 Data frames 3.1 Structure of a data frame What is the birthweight object? In the enviroment browser, you should see that it is “42 obs. of 18 variables.” It’s probably a data table with 42 rows and 18 coumns. We can verfiy this using the class() and dim() functions. class(birthweight) ## [1] &quot;data.frame&quot; dim(birthweight) ## [1] 42 18 A data frame organizes data into rows and columns. The object must be “rectangular,” with all rows having the same number of fields, and all values in a column must be of the same type. Each column of a data frame is a vector. A vector is an ordered collection of values of the same type. Let’s take a look at the contents. birthweight ## ID birth.date location length birthweight head.circumference ## 1 1107 1/25/1967 General 52 3.23 36 ## 2 697 2/6/1967 Silver Hill 48 3.03 35 ## 3 1683 2/14/1967 Silver Hill 53 3.35 33 ## 4 27 3/9/1967 Silver Hill 53 3.55 37 ## 5 1522 3/13/1967 Memorial 50 2.74 33 ## 6 569 3/23/1967 Memorial 50 2.51 35 ## 7 365 4/23/1967 Memorial 52 3.53 37 ## 8 808 5/5/1967 Silver Hill 48 2.92 33 ## 9 1369 6/4/1967 Silver Hill 49 3.18 34 ## 10 1023 6/7/1967 Memorial 52 3.00 35 ## 11 822 6/14/1967 Memorial 50 3.42 35 ## 12 1272 6/20/1967 Memorial 53 2.75 32 ## 13 1262 6/25/1967 Silver Hill 53 3.19 34 ## 14 575 7/12/1967 Memorial 50 2.78 30 ## 15 1016 7/13/1967 Silver Hill 53 4.32 36 ## 16 792 9/7/1967 Memorial 53 3.64 38 ## 17 820 10/7/1967 General 52 3.77 34 ## 18 752 10/19/1967 General 49 3.32 36 ## 19 619 11/1/1967 Memorial 52 3.41 33 ## 20 1764 12/7/1967 Silver Hill 58 4.57 39 ## 21 1081 12/14/1967 Silver Hill 54 3.63 38 ## 22 516 1/8/1968 Silver Hill 47 2.66 33 ## 23 272 1/10/1968 Memorial 52 3.86 36 ## 24 321 1/21/1968 Silver Hill 48 3.11 33 ## 25 1636 2/2/1968 Silver Hill 51 3.93 38 ## 26 1360 2/16/1968 General 56 4.55 34 ## 27 1388 2/22/1968 Memorial 51 3.14 33 ## 28 1363 4/2/1968 General 48 2.37 30 ## 29 1058 4/24/1968 Silver Hill 53 3.15 34 ## 30 755 4/25/1968 Memorial 53 3.20 33 ## 31 462 6/19/1968 Silver Hill 58 4.10 39 ## 32 300 7/18/1968 Silver Hill 46 2.05 32 ## 33 1088 7/24/1968 General 51 3.27 36 ## 34 57 8/12/1968 Memorial 51 3.32 38 ## 35 553 8/17/1968 Silver Hill 54 3.94 37 ## 36 1191 9/7/1968 General 53 3.65 33 ## 37 431 9/16/1968 Silver Hill 48 1.92 30 ## 38 1313 9/27/1968 Silver Hill 43 2.65 32 ## 39 1600 10/9/1968 General 53 2.90 34 ## 40 532 10/25/1968 General 53 3.59 34 ## 41 223 12/11/1968 General 50 3.87 33 ## 42 1187 12/19/1968 Silver Hill 53 4.07 38 ## weeks.gestation smoker maternal.age maternal.cigarettes maternal.height ## 1 38 no 31 0 164 ## 2 39 no 27 0 162 ## 3 41 no 27 0 164 ## 4 41 yes 37 25 161 ## 5 39 yes 21 17 156 ## 6 39 yes 22 7 159 ## 7 40 yes 26 25 170 ## 8 34 no 26 0 167 ## 9 38 yes 31 25 162 ## 10 38 yes 30 12 165 ## 11 38 no 20 0 157 ## 12 40 yes 37 50 168 ## 13 41 yes 27 35 163 ## 14 37 yes 19 7 165 ## 15 40 no 19 0 171 ## 16 40 yes 20 2 170 ## 17 40 no 24 0 157 ## 18 40 yes 27 12 152 ## 19 39 yes 23 25 181 ## 20 41 yes 32 12 173 ## 21 38 no 18 0 172 ## 22 35 yes 20 35 170 ## 23 39 yes 30 25 170 ## 24 37 no 28 0 158 ## 25 38 no 29 0 165 ## 26 44 no 20 0 162 ## 27 41 yes 22 7 160 ## 28 37 yes 20 7 163 ## 29 40 no 29 0 167 ## 30 41 no 21 0 155 ## 31 41 no 35 0 172 ## 32 35 yes 41 7 166 ## 33 40 no 24 0 168 ## 34 39 yes 23 17 157 ## 35 42 no 24 0 175 ## 36 42 no 21 0 165 ## 37 33 yes 20 7 161 ## 38 33 no 24 0 149 ## 39 39 no 19 0 165 ## 40 40 yes 31 12 163 ## 41 45 yes 28 25 163 ## 42 44 no 20 0 174 ## maternal.prepregnant.weight paternal.age paternal.education ## 1 57 NA NA ## 2 62 27 14 ## 3 62 37 14 ## 4 66 46 NA ## 5 53 24 12 ## 6 52 23 14 ## 7 62 30 10 ## 8 64 25 12 ## 9 57 32 16 ## 10 64 38 14 ## 11 48 22 14 ## 12 61 31 16 ## 13 51 31 16 ## 14 60 20 14 ## 15 62 19 12 ## 16 59 24 12 ## 17 50 31 16 ## 18 48 37 12 ## 19 69 23 16 ## 20 70 38 14 ## 21 50 20 12 ## 22 57 23 12 ## 23 78 40 16 ## 24 54 39 10 ## 25 61 NA NA ## 26 57 23 10 ## 27 53 24 16 ## 28 47 20 10 ## 29 60 30 16 ## 30 55 25 14 ## 31 58 31 16 ## 32 57 37 14 ## 33 53 29 16 ## 34 48 NA NA ## 35 66 30 12 ## 36 61 21 10 ## 37 50 20 10 ## 38 45 26 16 ## 39 57 NA NA ## 40 49 41 12 ## 41 54 30 16 ## 42 68 26 14 ## paternal.cigarettes paternal.height low.birthweight geriatric.pregnancy ## 1 NA NA 0 FALSE ## 2 0 178 0 FALSE ## 3 0 170 0 FALSE ## 4 0 175 0 TRUE ## 5 7 179 0 FALSE ## 6 25 NA 1 FALSE ## 7 25 181 0 FALSE ## 8 25 175 0 FALSE ## 9 50 194 0 FALSE ## 10 50 180 0 FALSE ## 11 0 179 0 FALSE ## 12 0 173 0 TRUE ## 13 25 185 0 FALSE ## 14 0 183 0 FALSE ## 15 0 183 0 FALSE ## 16 12 185 0 FALSE ## 17 0 173 0 FALSE ## 18 25 170 0 FALSE ## 19 2 181 0 FALSE ## 20 25 180 0 FALSE ## 21 7 172 0 FALSE ## 22 50 186 1 FALSE ## 23 50 178 0 FALSE ## 24 0 171 0 FALSE ## 25 NA NA 0 FALSE ## 26 35 179 0 FALSE ## 27 12 176 0 FALSE ## 28 35 185 1 FALSE ## 29 NA 182 0 FALSE ## 30 25 183 0 FALSE ## 31 25 185 0 TRUE ## 32 25 173 1 TRUE ## 33 0 181 0 FALSE ## 34 NA NA 0 FALSE ## 35 0 184 0 FALSE ## 36 25 185 0 FALSE ## 37 35 180 1 FALSE ## 38 0 169 1 FALSE ## 39 NA NA 0 FALSE ## 40 50 191 0 FALSE ## 41 0 183 0 FALSE ## 42 25 189 0 FALSE The data frame format should look familiar. It’s a lot like a spreadsheet. Generally, we don’t want to operate on the entire data frame. For example, to calculate the mean birth weight, we don’t need the information in the “paternal.education” column. There are three ways to subset data: $, [[, and [. 3.2 Selecting a single column using the $ and [[ operators The simplest way to get all the values in the “birthweight” column is with the $ operator. birthweight$birthweight ## [1] 3.23 3.03 3.35 3.55 2.74 2.51 3.53 2.92 3.18 3.00 3.42 2.75 3.19 2.78 4.32 ## [16] 3.64 3.77 3.32 3.41 4.57 3.63 2.66 3.86 3.11 3.93 4.55 3.14 2.37 3.15 3.20 ## [31] 4.10 2.05 3.27 3.32 3.94 3.65 1.92 2.65 2.90 3.59 3.87 4.07 mean(birthweight$birthweight) ## [1] 3.312857 This $ operator is a shortcut for the [[ sub-setting operator, which requires typing six characters (two pairs of square brackets and a pair of quotation marks). They function in the same way, returning the value of the element named. birthweight[[&quot;birthweight&quot;]] ## [1] 3.23 3.03 3.35 3.55 2.74 2.51 3.53 2.92 3.18 3.00 3.42 2.75 3.19 2.78 4.32 ## [16] 3.64 3.77 3.32 3.41 4.57 3.63 2.66 3.86 3.11 3.93 4.55 3.14 2.37 3.15 3.20 ## [31] 4.10 2.05 3.27 3.32 3.94 3.65 1.92 2.65 2.90 3.59 3.87 4.07 mean(birthweight[[&quot;birthweight&quot;]]) ## [1] 3.312857 One difference to note is that while [[ works with the index, or column number, $ does not. # which column contains the birthweight? # lines beginning with a &#39;#&#39; are comments, and are not executed by R colnames(birthweight) ## [1] &quot;ID&quot; &quot;birth.date&quot; ## [3] &quot;location&quot; &quot;length&quot; ## [5] &quot;birthweight&quot; &quot;head.circumference&quot; ## [7] &quot;weeks.gestation&quot; &quot;smoker&quot; ## [9] &quot;maternal.age&quot; &quot;maternal.cigarettes&quot; ## [11] &quot;maternal.height&quot; &quot;maternal.prepregnant.weight&quot; ## [13] &quot;paternal.age&quot; &quot;paternal.education&quot; ## [15] &quot;paternal.cigarettes&quot; &quot;paternal.height&quot; ## [17] &quot;low.birthweight&quot; &quot;geriatric.pregnancy&quot; birthweight[[5]] ## [1] 3.23 3.03 3.35 3.55 2.74 2.51 3.53 2.92 3.18 3.00 3.42 2.75 3.19 2.78 4.32 ## [16] 3.64 3.77 3.32 3.41 4.57 3.63 2.66 3.86 3.11 3.93 4.55 3.14 2.37 3.15 3.20 ## [31] 4.10 2.05 3.27 3.32 3.94 3.65 1.92 2.65 2.90 3.59 3.87 4.07 mean(birthweight[[5]]) ## [1] 3.312857 # un-comment the following line and see what happens: #birthweight$5 3.3 Selecting a subset of the data frame using the [ operator Unlike $ and [[, which return the value(s) contained in the specified element, [ returns an object of the same type it is used to subset. Using [ to retrieve the fifth column will return a data frame with 42 rows and 1 column. This may not seem like a big difference, but it can be an important distinction in some cases. birthweight[5] ## birthweight ## 1 3.23 ## 2 3.03 ## 3 3.35 ## 4 3.55 ## 5 2.74 ## 6 2.51 ## 7 3.53 ## 8 2.92 ## 9 3.18 ## 10 3.00 ## 11 3.42 ## 12 2.75 ## 13 3.19 ## 14 2.78 ## 15 4.32 ## 16 3.64 ## 17 3.77 ## 18 3.32 ## 19 3.41 ## 20 4.57 ## 21 3.63 ## 22 2.66 ## 23 3.86 ## 24 3.11 ## 25 3.93 ## 26 4.55 ## 27 3.14 ## 28 2.37 ## 29 3.15 ## 30 3.20 ## 31 4.10 ## 32 2.05 ## 33 3.27 ## 34 3.32 ## 35 3.94 ## 36 3.65 ## 37 1.92 ## 38 2.65 ## 39 2.90 ## 40 3.59 ## 41 3.87 ## 42 4.07 Because the [ operator returns a new data frame, it can be used to specify multiple rows and / or columns. birthweight[c(1,5)] ## ID birthweight ## 1 1107 3.23 ## 2 697 3.03 ## 3 1683 3.35 ## 4 27 3.55 ## 5 1522 2.74 ## 6 569 2.51 ## 7 365 3.53 ## 8 808 2.92 ## 9 1369 3.18 ## 10 1023 3.00 ## 11 822 3.42 ## 12 1272 2.75 ## 13 1262 3.19 ## 14 575 2.78 ## 15 1016 4.32 ## 16 792 3.64 ## 17 820 3.77 ## 18 752 3.32 ## 19 619 3.41 ## 20 1764 4.57 ## 21 1081 3.63 ## 22 516 2.66 ## 23 272 3.86 ## 24 321 3.11 ## 25 1636 3.93 ## 26 1360 4.55 ## 27 1388 3.14 ## 28 1363 2.37 ## 29 1058 3.15 ## 30 755 3.20 ## 31 462 4.10 ## 32 300 2.05 ## 33 1088 3.27 ## 34 57 3.32 ## 35 553 3.94 ## 36 1191 3.65 ## 37 431 1.92 ## 38 1313 2.65 ## 39 1600 2.90 ## 40 532 3.59 ## 41 223 3.87 ## 42 1187 4.07 The c() function creates a vector. This allows R to treat indices 1 and 5 as a single argument. This is critical, because birthweight[1,5] does not produce the same effect at all. birthweight[1, 5] ## [1] 3.23 What happened? When there are two arguments provided to [, R interprets these as the index on the first (row) and second (column) dimension of the object. The value returned is the content of the first row, fifth column: the birth weight of individual 1107. birthweight[c(2,7,29), c(1,5)] ## ID birthweight ## 2 697 3.03 ## 7 365 3.53 ## 29 1058 3.15 R will also accept row or column names, and the use of the minus sign to exclude indices. colnames(birthweight) ## [1] &quot;ID&quot; &quot;birth.date&quot; ## [3] &quot;location&quot; &quot;length&quot; ## [5] &quot;birthweight&quot; &quot;head.circumference&quot; ## [7] &quot;weeks.gestation&quot; &quot;smoker&quot; ## [9] &quot;maternal.age&quot; &quot;maternal.cigarettes&quot; ## [11] &quot;maternal.height&quot; &quot;maternal.prepregnant.weight&quot; ## [13] &quot;paternal.age&quot; &quot;paternal.education&quot; ## [15] &quot;paternal.cigarettes&quot; &quot;paternal.height&quot; ## [17] &quot;low.birthweight&quot; &quot;geriatric.pregnancy&quot; birthweight[c(&quot;maternal.cigarettes&quot;, &quot;birthweight&quot;)] ## maternal.cigarettes birthweight ## 1 0 3.23 ## 2 0 3.03 ## 3 0 3.35 ## 4 25 3.55 ## 5 17 2.74 ## 6 7 2.51 ## 7 25 3.53 ## 8 0 2.92 ## 9 25 3.18 ## 10 12 3.00 ## 11 0 3.42 ## 12 50 2.75 ## 13 35 3.19 ## 14 7 2.78 ## 15 0 4.32 ## 16 2 3.64 ## 17 0 3.77 ## 18 12 3.32 ## 19 25 3.41 ## 20 12 4.57 ## 21 0 3.63 ## 22 35 2.66 ## 23 25 3.86 ## 24 0 3.11 ## 25 0 3.93 ## 26 0 4.55 ## 27 7 3.14 ## 28 7 2.37 ## 29 0 3.15 ## 30 0 3.20 ## 31 0 4.10 ## 32 7 2.05 ## 33 0 3.27 ## 34 17 3.32 ## 35 0 3.94 ## 36 0 3.65 ## 37 7 1.92 ## 38 0 2.65 ## 39 0 2.90 ## 40 12 3.59 ## 41 25 3.87 ## 42 0 4.07 birthweight[c(1,3,5:13), -c(13:16)] ## ID birth.date location length birthweight head.circumference ## 1 1107 1/25/1967 General 52 3.23 36 ## 3 1683 2/14/1967 Silver Hill 53 3.35 33 ## 5 1522 3/13/1967 Memorial 50 2.74 33 ## 6 569 3/23/1967 Memorial 50 2.51 35 ## 7 365 4/23/1967 Memorial 52 3.53 37 ## 8 808 5/5/1967 Silver Hill 48 2.92 33 ## 9 1369 6/4/1967 Silver Hill 49 3.18 34 ## 10 1023 6/7/1967 Memorial 52 3.00 35 ## 11 822 6/14/1967 Memorial 50 3.42 35 ## 12 1272 6/20/1967 Memorial 53 2.75 32 ## 13 1262 6/25/1967 Silver Hill 53 3.19 34 ## weeks.gestation smoker maternal.age maternal.cigarettes maternal.height ## 1 38 no 31 0 164 ## 3 41 no 27 0 164 ## 5 39 yes 21 17 156 ## 6 39 yes 22 7 159 ## 7 40 yes 26 25 170 ## 8 34 no 26 0 167 ## 9 38 yes 31 25 162 ## 10 38 yes 30 12 165 ## 11 38 no 20 0 157 ## 12 40 yes 37 50 168 ## 13 41 yes 27 35 163 ## maternal.prepregnant.weight low.birthweight geriatric.pregnancy ## 1 57 0 FALSE ## 3 62 0 FALSE ## 5 53 0 FALSE ## 6 52 1 FALSE ## 7 62 0 FALSE ## 8 64 0 FALSE ## 9 57 0 FALSE ## 10 64 0 FALSE ## 11 48 0 FALSE ## 12 61 0 TRUE ## 13 51 0 FALSE Finally, vectors of logical (TRUE/FALSE) values can be used to subset data. Rows or columns corresponding to “TRUE” elements will be returned, while rows or columns corresponding to “FALSE” elements will be excluded. birthweight[c(1,3,5:13), c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE)] ## ID birth.date location length birthweight head.circumference ## 1 1107 1/25/1967 General 52 3.23 36 ## 3 1683 2/14/1967 Silver Hill 53 3.35 33 ## 5 1522 3/13/1967 Memorial 50 2.74 33 ## 6 569 3/23/1967 Memorial 50 2.51 35 ## 7 365 4/23/1967 Memorial 52 3.53 37 ## 8 808 5/5/1967 Silver Hill 48 2.92 33 ## 9 1369 6/4/1967 Silver Hill 49 3.18 34 ## 10 1023 6/7/1967 Memorial 52 3.00 35 ## 11 822 6/14/1967 Memorial 50 3.42 35 ## 12 1272 6/20/1967 Memorial 53 2.75 32 ## 13 1262 6/25/1967 Silver Hill 53 3.19 34 ## weeks.gestation smoker maternal.age maternal.cigarettes maternal.height ## 1 38 no 31 0 164 ## 3 41 no 27 0 164 ## 5 39 yes 21 17 156 ## 6 39 yes 22 7 159 ## 7 40 yes 26 25 170 ## 8 34 no 26 0 167 ## 9 38 yes 31 25 162 ## 10 38 yes 30 12 165 ## 11 38 no 20 0 157 ## 12 40 yes 37 50 168 ## 13 41 yes 27 35 163 ## maternal.prepregnant.weight low.birthweight geriatric.pregnancy ## 1 57 0 FALSE ## 3 62 0 FALSE ## 5 53 0 FALSE ## 6 52 1 FALSE ## 7 62 0 FALSE ## 8 64 0 FALSE ## 9 57 0 FALSE ## 10 64 0 FALSE ## 11 48 0 FALSE ## 12 61 0 TRUE ## 13 51 0 FALSE This is much more useful than it may sound. birthweight$length ## [1] 52 48 53 53 50 50 52 48 49 52 50 53 53 50 53 53 52 49 52 58 54 47 52 48 51 ## [26] 56 51 48 53 53 58 46 51 51 54 53 48 43 53 53 50 53 birthweight$length &lt; 50 ## [1] FALSE TRUE FALSE FALSE FALSE FALSE FALSE TRUE TRUE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE TRUE ## [25] FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE ## [37] TRUE TRUE FALSE FALSE FALSE FALSE birthweight[birthweight$length &lt; 50, c(1,4:12,17,18)] ## ID length birthweight head.circumference weeks.gestation smoker ## 2 697 48 3.03 35 39 no ## 8 808 48 2.92 33 34 no ## 9 1369 49 3.18 34 38 yes ## 18 752 49 3.32 36 40 yes ## 22 516 47 2.66 33 35 yes ## 24 321 48 3.11 33 37 no ## 28 1363 48 2.37 30 37 yes ## 32 300 46 2.05 32 35 yes ## 37 431 48 1.92 30 33 yes ## 38 1313 43 2.65 32 33 no ## maternal.age maternal.cigarettes maternal.height maternal.prepregnant.weight ## 2 27 0 162 62 ## 8 26 0 167 64 ## 9 31 25 162 57 ## 18 27 12 152 48 ## 22 20 35 170 57 ## 24 28 0 158 54 ## 28 20 7 163 47 ## 32 41 7 166 57 ## 37 20 7 161 50 ## 38 24 0 149 45 ## low.birthweight geriatric.pregnancy ## 2 0 FALSE ## 8 0 FALSE ## 9 0 FALSE ## 18 0 FALSE ## 22 1 FALSE ## 24 0 FALSE ## 28 1 FALSE ## 32 1 TRUE ## 37 1 FALSE ## 38 1 FALSE 3.3.1 Subsetting a vector A vector, like a column of a data frame, can be subsetted using the [ operator with an index or another vector. birthweight$length[1] ## [1] 52 birthweight$length[c(1,2)] ## [1] 52 48 Take a few minutes to explore subsetting. "],["basic-data-types.html", "4 Basic data types 4.1 Understanding class 4.2 Coercion: converting between classes", " 4 Basic data types We have already said that logical values can be used to subset a data frame, and all the values in a given column of a data frame must be of the same type But what does this mean? 4.1 Understanding class When R prints the birthweight data frame, you can see a line with three letter codes like &lt;int&gt; and &lt;chr&gt; just underneath the column headers. These describe the class, or type, of data found in the column. R has the following basic data classes: numeric (includes integer and double) character logical complex raw Generally, in bioinformatics, values belong to one of the first three classes. Read more about the complex and raw data types here. class(birthweight$birthweight) ## [1] &quot;numeric&quot; class(birthweight$smoker) ## [1] &quot;character&quot; class(birthweight$geriatric.pregnancy) ## [1] &quot;logical&quot; The integer and numeric categories are fairly self-explanatory. What are character and logical? Character values are exactly what they sound like: stored characters (letters and / or numbers). In the birthweight table, the “birth.date” and “location” columns contain character values. head(birthweight$location) ## [1] &quot;General&quot; &quot;Silver Hill&quot; &quot;Silver Hill&quot; &quot;Silver Hill&quot; &quot;Memorial&quot; ## [6] &quot;Memorial&quot; Logical values are TRUE, FALSE, or NA (missing). Logical values are the result of comparing one item to another with relational operators. birthweight[birthweight$head.circumference &gt; 35, c(&quot;length&quot;, &quot;weeks.gestation&quot;, &quot;maternal.height&quot;, &quot;paternal.height&quot;)] ## length weeks.gestation maternal.height paternal.height ## 1 52 38 164 NA ## 4 53 41 161 175 ## 7 52 40 170 181 ## 15 53 40 171 183 ## 16 53 40 170 185 ## 18 49 40 152 170 ## 20 58 41 173 180 ## 21 54 38 172 172 ## 23 52 39 170 178 ## 25 51 38 165 NA ## 31 58 41 172 185 ## 33 51 40 168 181 ## 34 51 39 157 NA ## 35 54 42 175 184 ## 42 53 44 174 189 birthweight[birthweight$maternal.age &lt;= 20, c(&quot;location&quot;, &quot;maternal.age&quot;, &quot;paternal.age&quot;)] ## location maternal.age paternal.age ## 11 Memorial 20 22 ## 14 Memorial 19 20 ## 15 Silver Hill 19 19 ## 16 Memorial 20 24 ## 21 Silver Hill 18 20 ## 22 Silver Hill 20 23 ## 26 General 20 23 ## 28 General 20 20 ## 37 Silver Hill 20 20 ## 39 General 19 NA ## 42 Silver Hill 20 26 birthweight[birthweight$paternal.education == 10, c(1,13:16)] ## ID paternal.age paternal.education paternal.cigarettes paternal.height ## NA NA NA NA NA NA ## NA.1 NA NA NA NA NA ## 7 365 30 10 25 181 ## 24 321 39 10 0 171 ## NA.2 NA NA NA NA NA ## 26 1360 23 10 35 179 ## 28 1363 20 10 35 185 ## NA.3 NA NA NA NA NA ## 36 1191 21 10 25 185 ## 37 431 20 10 35 180 ## NA.4 NA NA NA NA NA birthweight[birthweight$weeks.gestation != 40, &quot;weeks.gestation&quot;] ## [1] 38 39 41 41 39 39 34 38 38 38 41 37 39 41 38 35 39 37 38 44 41 37 41 41 35 ## [26] 39 42 42 33 33 39 45 44 birthweight[birthweight$location == &quot;General&quot;,] ## ID birth.date location length birthweight head.circumference ## 1 1107 1/25/1967 General 52 3.23 36 ## 17 820 10/7/1967 General 52 3.77 34 ## 18 752 10/19/1967 General 49 3.32 36 ## 26 1360 2/16/1968 General 56 4.55 34 ## 28 1363 4/2/1968 General 48 2.37 30 ## 33 1088 7/24/1968 General 51 3.27 36 ## 36 1191 9/7/1968 General 53 3.65 33 ## 39 1600 10/9/1968 General 53 2.90 34 ## 40 532 10/25/1968 General 53 3.59 34 ## 41 223 12/11/1968 General 50 3.87 33 ## weeks.gestation smoker maternal.age maternal.cigarettes maternal.height ## 1 38 no 31 0 164 ## 17 40 no 24 0 157 ## 18 40 yes 27 12 152 ## 26 44 no 20 0 162 ## 28 37 yes 20 7 163 ## 33 40 no 24 0 168 ## 36 42 no 21 0 165 ## 39 39 no 19 0 165 ## 40 40 yes 31 12 163 ## 41 45 yes 28 25 163 ## maternal.prepregnant.weight paternal.age paternal.education ## 1 57 NA NA ## 17 50 31 16 ## 18 48 37 12 ## 26 57 23 10 ## 28 47 20 10 ## 33 53 29 16 ## 36 61 21 10 ## 39 57 NA NA ## 40 49 41 12 ## 41 54 30 16 ## paternal.cigarettes paternal.height low.birthweight geriatric.pregnancy ## 1 NA NA 0 FALSE ## 17 0 173 0 FALSE ## 18 25 170 0 FALSE ## 26 35 179 0 FALSE ## 28 35 185 1 FALSE ## 33 0 181 0 FALSE ## 36 25 185 0 FALSE ## 39 NA NA 0 FALSE ## 40 50 191 0 FALSE ## 41 0 183 0 FALSE Many of R’s functions also return logical values. is.numeric(birthweight$ID) ## [1] TRUE is.numeric(birthweight$smoker) ## [1] FALSE 4.2 Coercion: converting between classes The birthweight data frame has three columns that should probably be logical values: “smoker”, “low.birthweight”, and “geriatric.pregnancy”. All of these are questions that can be answered with TRUE/FALSE. However, only “geriatric.pregnancy” is stored as a logical value. Storing “smoker” and “low.birthweight” as logical values would be more useful, since it allows us to subset the data frame more easily. Changing the class of data is known as coercion. as.logical(birthweight$low.birthweight) ## [1] FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE ## [25] FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE ## [37] TRUE TRUE FALSE FALSE FALSE FALSE as.logical(birthweight$smoker) ## [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [26] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA The as.logical() function converted “low.birthweight” to a logical vector, but could not convert “smoker,” and returned a vector of missing data denoted by NA. Why is this? The coercion rule in R is as follows: logical -&gt; integer -&gt; numeric -&gt; complex -&gt; character R can convert logical values to integers, store integers as the more general numeric type, or represent numeric data as a character, but these coercion operations cannot always be reversed without losing information. as.numeric(birthweight$geriatric.pregnancy) ## [1] 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 ## [39] 0 0 0 0 The as.logical() function only operates on “low.birthweight” the way we want because the data was encoded as 0s and 1s. If any other numbers were used, the results might be unexpected. as.logical(birthweight$maternal.age) ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE ## [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE Let’s convert the “low.birthweight” column to logical. birthweight$low.birthweight &lt;- as.logical(birthweight$low.birthweight) birthweight ## ID birth.date location length birthweight head.circumference ## 1 1107 1/25/1967 General 52 3.23 36 ## 2 697 2/6/1967 Silver Hill 48 3.03 35 ## 3 1683 2/14/1967 Silver Hill 53 3.35 33 ## 4 27 3/9/1967 Silver Hill 53 3.55 37 ## 5 1522 3/13/1967 Memorial 50 2.74 33 ## 6 569 3/23/1967 Memorial 50 2.51 35 ## 7 365 4/23/1967 Memorial 52 3.53 37 ## 8 808 5/5/1967 Silver Hill 48 2.92 33 ## 9 1369 6/4/1967 Silver Hill 49 3.18 34 ## 10 1023 6/7/1967 Memorial 52 3.00 35 ## 11 822 6/14/1967 Memorial 50 3.42 35 ## 12 1272 6/20/1967 Memorial 53 2.75 32 ## 13 1262 6/25/1967 Silver Hill 53 3.19 34 ## 14 575 7/12/1967 Memorial 50 2.78 30 ## 15 1016 7/13/1967 Silver Hill 53 4.32 36 ## 16 792 9/7/1967 Memorial 53 3.64 38 ## 17 820 10/7/1967 General 52 3.77 34 ## 18 752 10/19/1967 General 49 3.32 36 ## 19 619 11/1/1967 Memorial 52 3.41 33 ## 20 1764 12/7/1967 Silver Hill 58 4.57 39 ## 21 1081 12/14/1967 Silver Hill 54 3.63 38 ## 22 516 1/8/1968 Silver Hill 47 2.66 33 ## 23 272 1/10/1968 Memorial 52 3.86 36 ## 24 321 1/21/1968 Silver Hill 48 3.11 33 ## 25 1636 2/2/1968 Silver Hill 51 3.93 38 ## 26 1360 2/16/1968 General 56 4.55 34 ## 27 1388 2/22/1968 Memorial 51 3.14 33 ## 28 1363 4/2/1968 General 48 2.37 30 ## 29 1058 4/24/1968 Silver Hill 53 3.15 34 ## 30 755 4/25/1968 Memorial 53 3.20 33 ## 31 462 6/19/1968 Silver Hill 58 4.10 39 ## 32 300 7/18/1968 Silver Hill 46 2.05 32 ## 33 1088 7/24/1968 General 51 3.27 36 ## 34 57 8/12/1968 Memorial 51 3.32 38 ## 35 553 8/17/1968 Silver Hill 54 3.94 37 ## 36 1191 9/7/1968 General 53 3.65 33 ## 37 431 9/16/1968 Silver Hill 48 1.92 30 ## 38 1313 9/27/1968 Silver Hill 43 2.65 32 ## 39 1600 10/9/1968 General 53 2.90 34 ## 40 532 10/25/1968 General 53 3.59 34 ## 41 223 12/11/1968 General 50 3.87 33 ## 42 1187 12/19/1968 Silver Hill 53 4.07 38 ## weeks.gestation smoker maternal.age maternal.cigarettes maternal.height ## 1 38 no 31 0 164 ## 2 39 no 27 0 162 ## 3 41 no 27 0 164 ## 4 41 yes 37 25 161 ## 5 39 yes 21 17 156 ## 6 39 yes 22 7 159 ## 7 40 yes 26 25 170 ## 8 34 no 26 0 167 ## 9 38 yes 31 25 162 ## 10 38 yes 30 12 165 ## 11 38 no 20 0 157 ## 12 40 yes 37 50 168 ## 13 41 yes 27 35 163 ## 14 37 yes 19 7 165 ## 15 40 no 19 0 171 ## 16 40 yes 20 2 170 ## 17 40 no 24 0 157 ## 18 40 yes 27 12 152 ## 19 39 yes 23 25 181 ## 20 41 yes 32 12 173 ## 21 38 no 18 0 172 ## 22 35 yes 20 35 170 ## 23 39 yes 30 25 170 ## 24 37 no 28 0 158 ## 25 38 no 29 0 165 ## 26 44 no 20 0 162 ## 27 41 yes 22 7 160 ## 28 37 yes 20 7 163 ## 29 40 no 29 0 167 ## 30 41 no 21 0 155 ## 31 41 no 35 0 172 ## 32 35 yes 41 7 166 ## 33 40 no 24 0 168 ## 34 39 yes 23 17 157 ## 35 42 no 24 0 175 ## 36 42 no 21 0 165 ## 37 33 yes 20 7 161 ## 38 33 no 24 0 149 ## 39 39 no 19 0 165 ## 40 40 yes 31 12 163 ## 41 45 yes 28 25 163 ## 42 44 no 20 0 174 ## maternal.prepregnant.weight paternal.age paternal.education ## 1 57 NA NA ## 2 62 27 14 ## 3 62 37 14 ## 4 66 46 NA ## 5 53 24 12 ## 6 52 23 14 ## 7 62 30 10 ## 8 64 25 12 ## 9 57 32 16 ## 10 64 38 14 ## 11 48 22 14 ## 12 61 31 16 ## 13 51 31 16 ## 14 60 20 14 ## 15 62 19 12 ## 16 59 24 12 ## 17 50 31 16 ## 18 48 37 12 ## 19 69 23 16 ## 20 70 38 14 ## 21 50 20 12 ## 22 57 23 12 ## 23 78 40 16 ## 24 54 39 10 ## 25 61 NA NA ## 26 57 23 10 ## 27 53 24 16 ## 28 47 20 10 ## 29 60 30 16 ## 30 55 25 14 ## 31 58 31 16 ## 32 57 37 14 ## 33 53 29 16 ## 34 48 NA NA ## 35 66 30 12 ## 36 61 21 10 ## 37 50 20 10 ## 38 45 26 16 ## 39 57 NA NA ## 40 49 41 12 ## 41 54 30 16 ## 42 68 26 14 ## paternal.cigarettes paternal.height low.birthweight geriatric.pregnancy ## 1 NA NA FALSE FALSE ## 2 0 178 FALSE FALSE ## 3 0 170 FALSE FALSE ## 4 0 175 FALSE TRUE ## 5 7 179 FALSE FALSE ## 6 25 NA TRUE FALSE ## 7 25 181 FALSE FALSE ## 8 25 175 FALSE FALSE ## 9 50 194 FALSE FALSE ## 10 50 180 FALSE FALSE ## 11 0 179 FALSE FALSE ## 12 0 173 FALSE TRUE ## 13 25 185 FALSE FALSE ## 14 0 183 FALSE FALSE ## 15 0 183 FALSE FALSE ## 16 12 185 FALSE FALSE ## 17 0 173 FALSE FALSE ## 18 25 170 FALSE FALSE ## 19 2 181 FALSE FALSE ## 20 25 180 FALSE FALSE ## 21 7 172 FALSE FALSE ## 22 50 186 TRUE FALSE ## 23 50 178 FALSE FALSE ## 24 0 171 FALSE FALSE ## 25 NA NA FALSE FALSE ## 26 35 179 FALSE FALSE ## 27 12 176 FALSE FALSE ## 28 35 185 TRUE FALSE ## 29 NA 182 FALSE FALSE ## 30 25 183 FALSE FALSE ## 31 25 185 FALSE TRUE ## 32 25 173 TRUE TRUE ## 33 0 181 FALSE FALSE ## 34 NA NA FALSE FALSE ## 35 0 184 FALSE FALSE ## 36 25 185 FALSE FALSE ## 37 35 180 TRUE FALSE ## 38 0 169 TRUE FALSE ## 39 NA NA FALSE FALSE ## 40 50 191 FALSE FALSE ## 41 0 183 FALSE FALSE ## 42 25 189 FALSE FALSE Simple coercion is not going to convert the “smoker” column from character to logical. However, because the result of a relational operation is a vector of logical values, the “yes” and “no” values are easily converted to logical valuess. birthweight$smoker == &quot;yes&quot; ## [1] FALSE FALSE FALSE TRUE TRUE TRUE TRUE FALSE TRUE TRUE FALSE TRUE ## [13] TRUE TRUE FALSE TRUE FALSE TRUE TRUE TRUE FALSE TRUE TRUE FALSE ## [25] FALSE FALSE TRUE TRUE FALSE FALSE FALSE TRUE FALSE TRUE FALSE FALSE ## [37] TRUE FALSE FALSE TRUE TRUE FALSE birthweight$smoker &lt;- (birthweight$smoker == &quot;yes&quot;) birthweight ## ID birth.date location length birthweight head.circumference ## 1 1107 1/25/1967 General 52 3.23 36 ## 2 697 2/6/1967 Silver Hill 48 3.03 35 ## 3 1683 2/14/1967 Silver Hill 53 3.35 33 ## 4 27 3/9/1967 Silver Hill 53 3.55 37 ## 5 1522 3/13/1967 Memorial 50 2.74 33 ## 6 569 3/23/1967 Memorial 50 2.51 35 ## 7 365 4/23/1967 Memorial 52 3.53 37 ## 8 808 5/5/1967 Silver Hill 48 2.92 33 ## 9 1369 6/4/1967 Silver Hill 49 3.18 34 ## 10 1023 6/7/1967 Memorial 52 3.00 35 ## 11 822 6/14/1967 Memorial 50 3.42 35 ## 12 1272 6/20/1967 Memorial 53 2.75 32 ## 13 1262 6/25/1967 Silver Hill 53 3.19 34 ## 14 575 7/12/1967 Memorial 50 2.78 30 ## 15 1016 7/13/1967 Silver Hill 53 4.32 36 ## 16 792 9/7/1967 Memorial 53 3.64 38 ## 17 820 10/7/1967 General 52 3.77 34 ## 18 752 10/19/1967 General 49 3.32 36 ## 19 619 11/1/1967 Memorial 52 3.41 33 ## 20 1764 12/7/1967 Silver Hill 58 4.57 39 ## 21 1081 12/14/1967 Silver Hill 54 3.63 38 ## 22 516 1/8/1968 Silver Hill 47 2.66 33 ## 23 272 1/10/1968 Memorial 52 3.86 36 ## 24 321 1/21/1968 Silver Hill 48 3.11 33 ## 25 1636 2/2/1968 Silver Hill 51 3.93 38 ## 26 1360 2/16/1968 General 56 4.55 34 ## 27 1388 2/22/1968 Memorial 51 3.14 33 ## 28 1363 4/2/1968 General 48 2.37 30 ## 29 1058 4/24/1968 Silver Hill 53 3.15 34 ## 30 755 4/25/1968 Memorial 53 3.20 33 ## 31 462 6/19/1968 Silver Hill 58 4.10 39 ## 32 300 7/18/1968 Silver Hill 46 2.05 32 ## 33 1088 7/24/1968 General 51 3.27 36 ## 34 57 8/12/1968 Memorial 51 3.32 38 ## 35 553 8/17/1968 Silver Hill 54 3.94 37 ## 36 1191 9/7/1968 General 53 3.65 33 ## 37 431 9/16/1968 Silver Hill 48 1.92 30 ## 38 1313 9/27/1968 Silver Hill 43 2.65 32 ## 39 1600 10/9/1968 General 53 2.90 34 ## 40 532 10/25/1968 General 53 3.59 34 ## 41 223 12/11/1968 General 50 3.87 33 ## 42 1187 12/19/1968 Silver Hill 53 4.07 38 ## weeks.gestation smoker maternal.age maternal.cigarettes maternal.height ## 1 38 FALSE 31 0 164 ## 2 39 FALSE 27 0 162 ## 3 41 FALSE 27 0 164 ## 4 41 TRUE 37 25 161 ## 5 39 TRUE 21 17 156 ## 6 39 TRUE 22 7 159 ## 7 40 TRUE 26 25 170 ## 8 34 FALSE 26 0 167 ## 9 38 TRUE 31 25 162 ## 10 38 TRUE 30 12 165 ## 11 38 FALSE 20 0 157 ## 12 40 TRUE 37 50 168 ## 13 41 TRUE 27 35 163 ## 14 37 TRUE 19 7 165 ## 15 40 FALSE 19 0 171 ## 16 40 TRUE 20 2 170 ## 17 40 FALSE 24 0 157 ## 18 40 TRUE 27 12 152 ## 19 39 TRUE 23 25 181 ## 20 41 TRUE 32 12 173 ## 21 38 FALSE 18 0 172 ## 22 35 TRUE 20 35 170 ## 23 39 TRUE 30 25 170 ## 24 37 FALSE 28 0 158 ## 25 38 FALSE 29 0 165 ## 26 44 FALSE 20 0 162 ## 27 41 TRUE 22 7 160 ## 28 37 TRUE 20 7 163 ## 29 40 FALSE 29 0 167 ## 30 41 FALSE 21 0 155 ## 31 41 FALSE 35 0 172 ## 32 35 TRUE 41 7 166 ## 33 40 FALSE 24 0 168 ## 34 39 TRUE 23 17 157 ## 35 42 FALSE 24 0 175 ## 36 42 FALSE 21 0 165 ## 37 33 TRUE 20 7 161 ## 38 33 FALSE 24 0 149 ## 39 39 FALSE 19 0 165 ## 40 40 TRUE 31 12 163 ## 41 45 TRUE 28 25 163 ## 42 44 FALSE 20 0 174 ## maternal.prepregnant.weight paternal.age paternal.education ## 1 57 NA NA ## 2 62 27 14 ## 3 62 37 14 ## 4 66 46 NA ## 5 53 24 12 ## 6 52 23 14 ## 7 62 30 10 ## 8 64 25 12 ## 9 57 32 16 ## 10 64 38 14 ## 11 48 22 14 ## 12 61 31 16 ## 13 51 31 16 ## 14 60 20 14 ## 15 62 19 12 ## 16 59 24 12 ## 17 50 31 16 ## 18 48 37 12 ## 19 69 23 16 ## 20 70 38 14 ## 21 50 20 12 ## 22 57 23 12 ## 23 78 40 16 ## 24 54 39 10 ## 25 61 NA NA ## 26 57 23 10 ## 27 53 24 16 ## 28 47 20 10 ## 29 60 30 16 ## 30 55 25 14 ## 31 58 31 16 ## 32 57 37 14 ## 33 53 29 16 ## 34 48 NA NA ## 35 66 30 12 ## 36 61 21 10 ## 37 50 20 10 ## 38 45 26 16 ## 39 57 NA NA ## 40 49 41 12 ## 41 54 30 16 ## 42 68 26 14 ## paternal.cigarettes paternal.height low.birthweight geriatric.pregnancy ## 1 NA NA FALSE FALSE ## 2 0 178 FALSE FALSE ## 3 0 170 FALSE FALSE ## 4 0 175 FALSE TRUE ## 5 7 179 FALSE FALSE ## 6 25 NA TRUE FALSE ## 7 25 181 FALSE FALSE ## 8 25 175 FALSE FALSE ## 9 50 194 FALSE FALSE ## 10 50 180 FALSE FALSE ## 11 0 179 FALSE FALSE ## 12 0 173 FALSE TRUE ## 13 25 185 FALSE FALSE ## 14 0 183 FALSE FALSE ## 15 0 183 FALSE FALSE ## 16 12 185 FALSE FALSE ## 17 0 173 FALSE FALSE ## 18 25 170 FALSE FALSE ## 19 2 181 FALSE FALSE ## 20 25 180 FALSE FALSE ## 21 7 172 FALSE FALSE ## 22 50 186 TRUE FALSE ## 23 50 178 FALSE FALSE ## 24 0 171 FALSE FALSE ## 25 NA NA FALSE FALSE ## 26 35 179 FALSE FALSE ## 27 12 176 FALSE FALSE ## 28 35 185 TRUE FALSE ## 29 NA 182 FALSE FALSE ## 30 25 183 FALSE FALSE ## 31 25 185 FALSE TRUE ## 32 25 173 TRUE TRUE ## 33 0 181 FALSE FALSE ## 34 NA NA FALSE FALSE ## 35 0 184 FALSE FALSE ## 36 25 185 FALSE FALSE ## 37 35 180 TRUE FALSE ## 38 0 169 TRUE FALSE ## 39 NA NA FALSE FALSE ## 40 50 191 FALSE FALSE ## 41 0 183 FALSE FALSE ## 42 25 189 FALSE FALSE Converting the dates (currently stored as characters) to a more useable format is not as simple, and will require another function. "],["functions.html", "5 Functions 5.1 Basic functions 5.2 Combining functions 5.3 The apply() family of functions 5.4 Custom functions", " 5 Functions R is filled with functions. We have already used a few: read.csv(), class(), dim(), mean(), colnames(), as.logical(), and as.numeric(). To find the documentation on a function, use the ? character. This opens a page containing details on the function in the help pane. 5.1 Basic functions ?table table(birthweight$geriatric.pregnancy, birthweight$low.birthweight) ## ## FALSE TRUE ## FALSE 33 5 ## TRUE 3 1 Functions are invoked by name, with any arguments provided inside of parentheses. For example, the chisq.test() function, which runs a Chi-squared test, requires either a matrix or two vectors as arguments, and provides a number of options that may be set by the user. ?chisq.test chisq.test(birthweight$geriatric.pregnancy, birthweight$low.birthweight) ## Warning in chisq.test(birthweight$geriatric.pregnancy, ## birthweight$low.birthweight): Chi-squared approximation may be incorrect ## ## Pearson&#39;s Chi-squared test with Yates&#39; continuity correction ## ## data: birthweight$geriatric.pregnancy and birthweight$low.birthweight ## X-squared = 2.7398e-31, df = 1, p-value = 1 If no parameters are provided to the options, the default values are used. mean(birthweight$birthweight[birthweight$geriatric.pregnancy]) ## [1] 3.1125 # the ! character is used for negation mean(birthweight$birthweight[!birthweight$geriatric.pregnancy]) ## [1] 3.333947 In some cases, this is acceptable. mean(birthweight$paternal.age) ## [1] NA mean(birthweight$paternal.age, na.rm = TRUE) ## [1] 28.76316 sd(birthweight$paternal.age, na.rm = TRUE) ## [1] 7.061254 Other times, it is necessary to adjust the options. 5.2 Combining functions The “birth.date” column is currently stored as a character vector. But what if we wanted to look at the birth weights of babies born in December? Let’s split the day, month, and year into separate columns. R has a function called strsplit(): ?strsplit strsplit(birthweight$birth.date, split = &quot;/&quot;) ## [[1]] ## [1] &quot;1&quot; &quot;25&quot; &quot;1967&quot; ## ## [[2]] ## [1] &quot;2&quot; &quot;6&quot; &quot;1967&quot; ## ## [[3]] ## [1] &quot;2&quot; &quot;14&quot; &quot;1967&quot; ## ## [[4]] ## [1] &quot;3&quot; &quot;9&quot; &quot;1967&quot; ## ## [[5]] ## [1] &quot;3&quot; &quot;13&quot; &quot;1967&quot; ## ## [[6]] ## [1] &quot;3&quot; &quot;23&quot; &quot;1967&quot; ## ## [[7]] ## [1] &quot;4&quot; &quot;23&quot; &quot;1967&quot; ## ## [[8]] ## [1] &quot;5&quot; &quot;5&quot; &quot;1967&quot; ## ## [[9]] ## [1] &quot;6&quot; &quot;4&quot; &quot;1967&quot; ## ## [[10]] ## [1] &quot;6&quot; &quot;7&quot; &quot;1967&quot; ## ## [[11]] ## [1] &quot;6&quot; &quot;14&quot; &quot;1967&quot; ## ## [[12]] ## [1] &quot;6&quot; &quot;20&quot; &quot;1967&quot; ## ## [[13]] ## [1] &quot;6&quot; &quot;25&quot; &quot;1967&quot; ## ## [[14]] ## [1] &quot;7&quot; &quot;12&quot; &quot;1967&quot; ## ## [[15]] ## [1] &quot;7&quot; &quot;13&quot; &quot;1967&quot; ## ## [[16]] ## [1] &quot;9&quot; &quot;7&quot; &quot;1967&quot; ## ## [[17]] ## [1] &quot;10&quot; &quot;7&quot; &quot;1967&quot; ## ## [[18]] ## [1] &quot;10&quot; &quot;19&quot; &quot;1967&quot; ## ## [[19]] ## [1] &quot;11&quot; &quot;1&quot; &quot;1967&quot; ## ## [[20]] ## [1] &quot;12&quot; &quot;7&quot; &quot;1967&quot; ## ## [[21]] ## [1] &quot;12&quot; &quot;14&quot; &quot;1967&quot; ## ## [[22]] ## [1] &quot;1&quot; &quot;8&quot; &quot;1968&quot; ## ## [[23]] ## [1] &quot;1&quot; &quot;10&quot; &quot;1968&quot; ## ## [[24]] ## [1] &quot;1&quot; &quot;21&quot; &quot;1968&quot; ## ## [[25]] ## [1] &quot;2&quot; &quot;2&quot; &quot;1968&quot; ## ## [[26]] ## [1] &quot;2&quot; &quot;16&quot; &quot;1968&quot; ## ## [[27]] ## [1] &quot;2&quot; &quot;22&quot; &quot;1968&quot; ## ## [[28]] ## [1] &quot;4&quot; &quot;2&quot; &quot;1968&quot; ## ## [[29]] ## [1] &quot;4&quot; &quot;24&quot; &quot;1968&quot; ## ## [[30]] ## [1] &quot;4&quot; &quot;25&quot; &quot;1968&quot; ## ## [[31]] ## [1] &quot;6&quot; &quot;19&quot; &quot;1968&quot; ## ## [[32]] ## [1] &quot;7&quot; &quot;18&quot; &quot;1968&quot; ## ## [[33]] ## [1] &quot;7&quot; &quot;24&quot; &quot;1968&quot; ## ## [[34]] ## [1] &quot;8&quot; &quot;12&quot; &quot;1968&quot; ## ## [[35]] ## [1] &quot;8&quot; &quot;17&quot; &quot;1968&quot; ## ## [[36]] ## [1] &quot;9&quot; &quot;7&quot; &quot;1968&quot; ## ## [[37]] ## [1] &quot;9&quot; &quot;16&quot; &quot;1968&quot; ## ## [[38]] ## [1] &quot;9&quot; &quot;27&quot; &quot;1968&quot; ## ## [[39]] ## [1] &quot;10&quot; &quot;9&quot; &quot;1968&quot; ## ## [[40]] ## [1] &quot;10&quot; &quot;25&quot; &quot;1968&quot; ## ## [[41]] ## [1] &quot;12&quot; &quot;11&quot; &quot;1968&quot; ## ## [[42]] ## [1] &quot;12&quot; &quot;19&quot; &quot;1968&quot; This is a good start. However, the output of strsplit() is a list containing 42 vectors of length 3, while the columns of birthweight are vectors of length 42. A note on lists: Lists are ordered collections of objects, which can be of any type. Unlike vectors, lists may contain elements of different types. To subset a list, use the $ or [[ operator. unlist(strsplit(birthweight$birth.date, split = &quot;/&quot;)) ## [1] &quot;1&quot; &quot;25&quot; &quot;1967&quot; &quot;2&quot; &quot;6&quot; &quot;1967&quot; &quot;2&quot; &quot;14&quot; &quot;1967&quot; &quot;3&quot; ## [11] &quot;9&quot; &quot;1967&quot; &quot;3&quot; &quot;13&quot; &quot;1967&quot; &quot;3&quot; &quot;23&quot; &quot;1967&quot; &quot;4&quot; &quot;23&quot; ## [21] &quot;1967&quot; &quot;5&quot; &quot;5&quot; &quot;1967&quot; &quot;6&quot; &quot;4&quot; &quot;1967&quot; &quot;6&quot; &quot;7&quot; &quot;1967&quot; ## [31] &quot;6&quot; &quot;14&quot; &quot;1967&quot; &quot;6&quot; &quot;20&quot; &quot;1967&quot; &quot;6&quot; &quot;25&quot; &quot;1967&quot; &quot;7&quot; ## [41] &quot;12&quot; &quot;1967&quot; &quot;7&quot; &quot;13&quot; &quot;1967&quot; &quot;9&quot; &quot;7&quot; &quot;1967&quot; &quot;10&quot; &quot;7&quot; ## [51] &quot;1967&quot; &quot;10&quot; &quot;19&quot; &quot;1967&quot; &quot;11&quot; &quot;1&quot; &quot;1967&quot; &quot;12&quot; &quot;7&quot; &quot;1967&quot; ## [61] &quot;12&quot; &quot;14&quot; &quot;1967&quot; &quot;1&quot; &quot;8&quot; &quot;1968&quot; &quot;1&quot; &quot;10&quot; &quot;1968&quot; &quot;1&quot; ## [71] &quot;21&quot; &quot;1968&quot; &quot;2&quot; &quot;2&quot; &quot;1968&quot; &quot;2&quot; &quot;16&quot; &quot;1968&quot; &quot;2&quot; &quot;22&quot; ## [81] &quot;1968&quot; &quot;4&quot; &quot;2&quot; &quot;1968&quot; &quot;4&quot; &quot;24&quot; &quot;1968&quot; &quot;4&quot; &quot;25&quot; &quot;1968&quot; ## [91] &quot;6&quot; &quot;19&quot; &quot;1968&quot; &quot;7&quot; &quot;18&quot; &quot;1968&quot; &quot;7&quot; &quot;24&quot; &quot;1968&quot; &quot;8&quot; ## [101] &quot;12&quot; &quot;1968&quot; &quot;8&quot; &quot;17&quot; &quot;1968&quot; &quot;9&quot; &quot;7&quot; &quot;1968&quot; &quot;9&quot; &quot;16&quot; ## [111] &quot;1968&quot; &quot;9&quot; &quot;27&quot; &quot;1968&quot; &quot;10&quot; &quot;9&quot; &quot;1968&quot; &quot;10&quot; &quot;25&quot; &quot;1968&quot; ## [121] &quot;12&quot; &quot;11&quot; &quot;1968&quot; &quot;12&quot; &quot;19&quot; &quot;1968&quot; When functions are “nested,” the operation in the innermost set of parentheses is performed first. In the example above, the unlist() function is applied to the output of strsplit(), changing a list to a vector. Since the goal was to split one column into three columns, this combination of functions is not effective. 5.3 The apply() family of functions One of the most useful groups of functions in R is the apply() family of functions. This group of functions execute (or apply) a provided function to every element of a data structure. apply takes a matrix, applies a function either by row or by column, and returns a vector. # by row apply(birthweight[,c(&quot;maternal.cigarettes&quot;, &quot;paternal.cigarettes&quot;)], 1, sum) ## [1] NA 0 0 25 24 32 50 25 75 62 0 50 60 7 0 14 0 37 27 37 7 85 75 0 NA ## [26] 35 19 42 NA 25 25 32 0 NA 0 25 42 0 NA 62 25 25 # by column apply(birthweight[,c(&quot;maternal.cigarettes&quot;, &quot;paternal.cigarettes&quot;)], 2, sum) ## maternal.cigarettes paternal.cigarettes ## 396 NA mapply takes a function and applies it to the elements of one or more vectors. mapply(sum, birthweight$maternal.cigarettes, birthweight$paternal.cigarettes) ## [1] NA 0 0 25 24 32 50 25 75 62 0 50 60 7 0 14 0 37 27 37 7 85 75 0 NA ## [26] 35 19 42 NA 25 25 32 0 NA 0 25 42 0 NA 62 25 25 tapply takes two vectors, applies a function to the subsets of the first based on the categories in the second vector, and returns a table. tapply(birthweight$birthweight, birthweight$smoker, mean) ## FALSE TRUE ## 3.509500 3.134091 lapply takes a list, applies a function to each element, and returns a list. sapply takes a list, applies a function to each element, and returns a list that has been simplified as much as possible. lapply(strsplit(birthweight$birth.date, split = &quot;/&quot;), &#39;[[&#39;, 1) ## [[1]] ## [1] &quot;1&quot; ## ## [[2]] ## [1] &quot;2&quot; ## ## [[3]] ## [1] &quot;2&quot; ## ## [[4]] ## [1] &quot;3&quot; ## ## [[5]] ## [1] &quot;3&quot; ## ## [[6]] ## [1] &quot;3&quot; ## ## [[7]] ## [1] &quot;4&quot; ## ## [[8]] ## [1] &quot;5&quot; ## ## [[9]] ## [1] &quot;6&quot; ## ## [[10]] ## [1] &quot;6&quot; ## ## [[11]] ## [1] &quot;6&quot; ## ## [[12]] ## [1] &quot;6&quot; ## ## [[13]] ## [1] &quot;6&quot; ## ## [[14]] ## [1] &quot;7&quot; ## ## [[15]] ## [1] &quot;7&quot; ## ## [[16]] ## [1] &quot;9&quot; ## ## [[17]] ## [1] &quot;10&quot; ## ## [[18]] ## [1] &quot;10&quot; ## ## [[19]] ## [1] &quot;11&quot; ## ## [[20]] ## [1] &quot;12&quot; ## ## [[21]] ## [1] &quot;12&quot; ## ## [[22]] ## [1] &quot;1&quot; ## ## [[23]] ## [1] &quot;1&quot; ## ## [[24]] ## [1] &quot;1&quot; ## ## [[25]] ## [1] &quot;2&quot; ## ## [[26]] ## [1] &quot;2&quot; ## ## [[27]] ## [1] &quot;2&quot; ## ## [[28]] ## [1] &quot;4&quot; ## ## [[29]] ## [1] &quot;4&quot; ## ## [[30]] ## [1] &quot;4&quot; ## ## [[31]] ## [1] &quot;6&quot; ## ## [[32]] ## [1] &quot;7&quot; ## ## [[33]] ## [1] &quot;7&quot; ## ## [[34]] ## [1] &quot;8&quot; ## ## [[35]] ## [1] &quot;8&quot; ## ## [[36]] ## [1] &quot;9&quot; ## ## [[37]] ## [1] &quot;9&quot; ## ## [[38]] ## [1] &quot;9&quot; ## ## [[39]] ## [1] &quot;10&quot; ## ## [[40]] ## [1] &quot;10&quot; ## ## [[41]] ## [1] &quot;12&quot; ## ## [[42]] ## [1] &quot;12&quot; sapply(strsplit(birthweight$birth.date, split = &quot;/&quot;), &#39;[[&#39;, 1) ## [1] &quot;1&quot; &quot;2&quot; &quot;2&quot; &quot;3&quot; &quot;3&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;6&quot; &quot;6&quot; &quot;6&quot; &quot;6&quot; &quot;7&quot; &quot;7&quot; ## [16] &quot;9&quot; &quot;10&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;12&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; &quot;2&quot; &quot;2&quot; &quot;2&quot; &quot;4&quot; &quot;4&quot; &quot;4&quot; ## [31] &quot;6&quot; &quot;7&quot; &quot;7&quot; &quot;8&quot; &quot;8&quot; &quot;9&quot; &quot;9&quot; &quot;9&quot; &quot;10&quot; &quot;10&quot; &quot;12&quot; &quot;12&quot; The result of this nested pair of functions is a vector of months encoded as numbers. 5.4 Custom functions What if we want to do this for all three fields, but we don’t want to write the code three times? Take a few minutes to dissect the following function, working from the inside out. What does each piece do? # custom function takes a vector of dates and returns a data frame with columns day, month, and year split_MMDDYYYY &lt;- function(date_vector){ date_list = lapply(seq(1:3), function(i){ as.integer(sapply(strsplit(date_vector, split = &quot;/&quot;), &#39;[[&#39;, i)) }) names(date_list) = c(&quot;month&quot;, &quot;day&quot;, &quot;year&quot;) as.data.frame(do.call(&quot;cbind&quot;, date_list)) } split_MMDDYYYY(birthweight$birth.date) ## month day year ## 1 1 25 1967 ## 2 2 6 1967 ## 3 2 14 1967 ## 4 3 9 1967 ## 5 3 13 1967 ## 6 3 23 1967 ## 7 4 23 1967 ## 8 5 5 1967 ## 9 6 4 1967 ## 10 6 7 1967 ## 11 6 14 1967 ## 12 6 20 1967 ## 13 6 25 1967 ## 14 7 12 1967 ## 15 7 13 1967 ## 16 9 7 1967 ## 17 10 7 1967 ## 18 10 19 1967 ## 19 11 1 1967 ## 20 12 7 1967 ## 21 12 14 1967 ## 22 1 8 1968 ## 23 1 10 1968 ## 24 1 21 1968 ## 25 2 2 1968 ## 26 2 16 1968 ## 27 2 22 1968 ## 28 4 2 1968 ## 29 4 24 1968 ## 30 4 25 1968 ## 31 6 19 1968 ## 32 7 18 1968 ## 33 7 24 1968 ## 34 8 12 1968 ## 35 8 17 1968 ## 36 9 7 1968 ## 37 9 16 1968 ## 38 9 27 1968 ## 39 10 9 1968 ## 40 10 25 1968 ## 41 12 11 1968 ## 42 12 19 1968 birthweight &lt;- cbind(birthweight, split_MMDDYYYY(birthweight$birth.date)) The cbind() function combines objects by column. Now that we have the birth month in its own column, we can get the mean of birth weight by month. tapply(birthweight$birthweight, birthweight$month, mean) ## 1 2 3 4 5 6 7 8 ## 3.215000 3.600000 2.933333 3.062500 2.920000 3.273333 3.105000 3.630000 ## 9 10 11 12 ## 2.965000 3.395000 3.410000 4.035000 Merging data frames For this example experiment, we also have placental miRNA expression data. These values are not from real samples, due to patient privacy concerns, but have been manipulated to roughly reproduce the effect observed by Maccani et al. 2010. mir &lt;- read.csv(&quot;datasets/miRNA.csv&quot;, row.names = 1) mir ## sample.27 sample.1522 sample.569 sample.365 sample.1369 sample.1023 ## miR-16 46 56 47 54 56 59 ## miR-21 52 43 40 35 59 47 ## miR-146a 98 97 87 96 84 96 ## miR-182 53 45 63 41 46 50 ## sample.1272 sample.1262 sample.575 sample.792 sample.752 sample.619 ## miR-16 49 55 62 63 46 52 ## miR-21 42 45 55 45 42 43 ## miR-146a 88 97 96 104 103 92 ## miR-182 49 50 62 51 64 58 ## sample.1764 sample.516 sample.272 sample.1388 sample.1363 sample.300 ## miR-16 46 61 49 46 61 60 ## miR-21 40 51 43 44 47 48 ## miR-146a 98 97 91 105 77 89 ## miR-182 57 59 55 60 60 65 ## sample.57 sample.431 sample.532 sample.223 sample.1107 sample.697 ## miR-16 46 70 60 60 57 68 ## miR-21 39 51 44 46 49 47 ## miR-146a 105 84 94 87 116 98 ## miR-182 40 48 49 52 48 57 ## sample.1683 sample.808 sample.822 sample.1016 sample.820 sample.1081 ## miR-16 49 59 54 69 58 55 ## miR-21 48 56 52 41 55 52 ## miR-146a 98 101 86 98 102 93 ## miR-182 55 74 49 51 53 52 ## sample.321 sample.1636 sample.1360 sample.1058 sample.755 sample.462 ## miR-16 68 63 70 77 56 65 ## miR-21 46 39 57 55 46 58 ## miR-146a 125 104 111 124 101 101 ## miR-182 60 43 46 56 50 60 ## sample.1088 sample.553 sample.1191 sample.1313 sample.1600 sample.1187 ## miR-16 42 63 66 64 50 57 ## miR-21 54 54 48 47 44 46 ## miR-146a 107 106 102 104 111 86 ## miR-182 63 60 50 42 67 43 In this object, the rows are the gene identifiers, and the columns are the samples. mir &lt;- as.data.frame(t(mir)) mir$ID &lt;- gsub(&quot;sample.&quot;, &quot;&quot;, rownames(mir)) experiment &lt;- merge(birthweight, mir) experiment ## ID birth.date location length birthweight head.circumference ## 1 27 3/9/1967 Silver Hill 53 3.55 37 ## 2 57 8/12/1968 Memorial 51 3.32 38 ## 3 223 12/11/1968 General 50 3.87 33 ## 4 272 1/10/1968 Memorial 52 3.86 36 ## 5 300 7/18/1968 Silver Hill 46 2.05 32 ## 6 321 1/21/1968 Silver Hill 48 3.11 33 ## 7 365 4/23/1967 Memorial 52 3.53 37 ## 8 431 9/16/1968 Silver Hill 48 1.92 30 ## 9 462 6/19/1968 Silver Hill 58 4.10 39 ## 10 516 1/8/1968 Silver Hill 47 2.66 33 ## 11 532 10/25/1968 General 53 3.59 34 ## 12 553 8/17/1968 Silver Hill 54 3.94 37 ## 13 569 3/23/1967 Memorial 50 2.51 35 ## 14 575 7/12/1967 Memorial 50 2.78 30 ## 15 619 11/1/1967 Memorial 52 3.41 33 ## 16 697 2/6/1967 Silver Hill 48 3.03 35 ## 17 752 10/19/1967 General 49 3.32 36 ## 18 755 4/25/1968 Memorial 53 3.20 33 ## 19 792 9/7/1967 Memorial 53 3.64 38 ## 20 808 5/5/1967 Silver Hill 48 2.92 33 ## 21 820 10/7/1967 General 52 3.77 34 ## 22 822 6/14/1967 Memorial 50 3.42 35 ## 23 1016 7/13/1967 Silver Hill 53 4.32 36 ## 24 1023 6/7/1967 Memorial 52 3.00 35 ## 25 1058 4/24/1968 Silver Hill 53 3.15 34 ## 26 1081 12/14/1967 Silver Hill 54 3.63 38 ## 27 1088 7/24/1968 General 51 3.27 36 ## 28 1107 1/25/1967 General 52 3.23 36 ## 29 1187 12/19/1968 Silver Hill 53 4.07 38 ## 30 1191 9/7/1968 General 53 3.65 33 ## 31 1262 6/25/1967 Silver Hill 53 3.19 34 ## 32 1272 6/20/1967 Memorial 53 2.75 32 ## 33 1313 9/27/1968 Silver Hill 43 2.65 32 ## 34 1360 2/16/1968 General 56 4.55 34 ## 35 1363 4/2/1968 General 48 2.37 30 ## 36 1369 6/4/1967 Silver Hill 49 3.18 34 ## 37 1388 2/22/1968 Memorial 51 3.14 33 ## 38 1522 3/13/1967 Memorial 50 2.74 33 ## 39 1600 10/9/1968 General 53 2.90 34 ## 40 1636 2/2/1968 Silver Hill 51 3.93 38 ## weeks.gestation smoker maternal.age maternal.cigarettes maternal.height ## 1 41 TRUE 37 25 161 ## 2 39 TRUE 23 17 157 ## 3 45 TRUE 28 25 163 ## 4 39 TRUE 30 25 170 ## 5 35 TRUE 41 7 166 ## 6 37 FALSE 28 0 158 ## 7 40 TRUE 26 25 170 ## 8 33 TRUE 20 7 161 ## 9 41 FALSE 35 0 172 ## 10 35 TRUE 20 35 170 ## 11 40 TRUE 31 12 163 ## 12 42 FALSE 24 0 175 ## 13 39 TRUE 22 7 159 ## 14 37 TRUE 19 7 165 ## 15 39 TRUE 23 25 181 ## 16 39 FALSE 27 0 162 ## 17 40 TRUE 27 12 152 ## 18 41 FALSE 21 0 155 ## 19 40 TRUE 20 2 170 ## 20 34 FALSE 26 0 167 ## 21 40 FALSE 24 0 157 ## 22 38 FALSE 20 0 157 ## 23 40 FALSE 19 0 171 ## 24 38 TRUE 30 12 165 ## 25 40 FALSE 29 0 167 ## 26 38 FALSE 18 0 172 ## 27 40 FALSE 24 0 168 ## 28 38 FALSE 31 0 164 ## 29 44 FALSE 20 0 174 ## 30 42 FALSE 21 0 165 ## 31 41 TRUE 27 35 163 ## 32 40 TRUE 37 50 168 ## 33 33 FALSE 24 0 149 ## 34 44 FALSE 20 0 162 ## 35 37 TRUE 20 7 163 ## 36 38 TRUE 31 25 162 ## 37 41 TRUE 22 7 160 ## 38 39 TRUE 21 17 156 ## 39 39 FALSE 19 0 165 ## 40 38 FALSE 29 0 165 ## maternal.prepregnant.weight paternal.age paternal.education ## 1 66 46 NA ## 2 48 NA NA ## 3 54 30 16 ## 4 78 40 16 ## 5 57 37 14 ## 6 54 39 10 ## 7 62 30 10 ## 8 50 20 10 ## 9 58 31 16 ## 10 57 23 12 ## 11 49 41 12 ## 12 66 30 12 ## 13 52 23 14 ## 14 60 20 14 ## 15 69 23 16 ## 16 62 27 14 ## 17 48 37 12 ## 18 55 25 14 ## 19 59 24 12 ## 20 64 25 12 ## 21 50 31 16 ## 22 48 22 14 ## 23 62 19 12 ## 24 64 38 14 ## 25 60 30 16 ## 26 50 20 12 ## 27 53 29 16 ## 28 57 NA NA ## 29 68 26 14 ## 30 61 21 10 ## 31 51 31 16 ## 32 61 31 16 ## 33 45 26 16 ## 34 57 23 10 ## 35 47 20 10 ## 36 57 32 16 ## 37 53 24 16 ## 38 53 24 12 ## 39 57 NA NA ## 40 61 NA NA ## paternal.cigarettes paternal.height low.birthweight geriatric.pregnancy ## 1 0 175 FALSE TRUE ## 2 NA NA FALSE FALSE ## 3 0 183 FALSE FALSE ## 4 50 178 FALSE FALSE ## 5 25 173 TRUE TRUE ## 6 0 171 FALSE FALSE ## 7 25 181 FALSE FALSE ## 8 35 180 TRUE FALSE ## 9 25 185 FALSE TRUE ## 10 50 186 TRUE FALSE ## 11 50 191 FALSE FALSE ## 12 0 184 FALSE FALSE ## 13 25 NA TRUE FALSE ## 14 0 183 FALSE FALSE ## 15 2 181 FALSE FALSE ## 16 0 178 FALSE FALSE ## 17 25 170 FALSE FALSE ## 18 25 183 FALSE FALSE ## 19 12 185 FALSE FALSE ## 20 25 175 FALSE FALSE ## 21 0 173 FALSE FALSE ## 22 0 179 FALSE FALSE ## 23 0 183 FALSE FALSE ## 24 50 180 FALSE FALSE ## 25 NA 182 FALSE FALSE ## 26 7 172 FALSE FALSE ## 27 0 181 FALSE FALSE ## 28 NA NA FALSE FALSE ## 29 25 189 FALSE FALSE ## 30 25 185 FALSE FALSE ## 31 25 185 FALSE FALSE ## 32 0 173 FALSE TRUE ## 33 0 169 TRUE FALSE ## 34 35 179 FALSE FALSE ## 35 35 185 TRUE FALSE ## 36 50 194 FALSE FALSE ## 37 12 176 FALSE FALSE ## 38 7 179 FALSE FALSE ## 39 NA NA FALSE FALSE ## 40 NA NA FALSE FALSE ## month day year miR-16 miR-21 miR-146a miR-182 ## 1 3 9 1967 46 52 98 53 ## 2 8 12 1968 46 39 105 40 ## 3 12 11 1968 60 46 87 52 ## 4 1 10 1968 49 43 91 55 ## 5 7 18 1968 60 48 89 65 ## 6 1 21 1968 68 46 125 60 ## 7 4 23 1967 54 35 96 41 ## 8 9 16 1968 70 51 84 48 ## 9 6 19 1968 65 58 101 60 ## 10 1 8 1968 61 51 97 59 ## 11 10 25 1968 60 44 94 49 ## 12 8 17 1968 63 54 106 60 ## 13 3 23 1967 47 40 87 63 ## 14 7 12 1967 62 55 96 62 ## 15 11 1 1967 52 43 92 58 ## 16 2 6 1967 68 47 98 57 ## 17 10 19 1967 46 42 103 64 ## 18 4 25 1968 56 46 101 50 ## 19 9 7 1967 63 45 104 51 ## 20 5 5 1967 59 56 101 74 ## 21 10 7 1967 58 55 102 53 ## 22 6 14 1967 54 52 86 49 ## 23 7 13 1967 69 41 98 51 ## 24 6 7 1967 59 47 96 50 ## 25 4 24 1968 77 55 124 56 ## 26 12 14 1967 55 52 93 52 ## 27 7 24 1968 42 54 107 63 ## 28 1 25 1967 57 49 116 48 ## 29 12 19 1968 57 46 86 43 ## 30 9 7 1968 66 48 102 50 ## 31 6 25 1967 55 45 97 50 ## 32 6 20 1967 49 42 88 49 ## 33 9 27 1968 64 47 104 42 ## 34 2 16 1968 70 57 111 46 ## 35 4 2 1968 61 47 77 60 ## 36 6 4 1967 56 59 84 46 ## 37 2 22 1968 46 44 105 60 ## 38 3 13 1967 56 43 97 45 ## 39 10 9 1968 50 44 111 67 ## 40 2 2 1968 63 39 104 43 ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 2 rows ] "],["installing-packages.html", "6 Installing packages", " 6 Installing packages if (!(&quot;BiocManager&quot; %in% rownames(installed.packages()))){ install.packages(&quot;BiocManager&quot;) } if (!(&quot;ggplot2&quot; %in% rownames(installed.packages()))){ install.packages(&quot;ggplot2&quot;) } if (!(&quot;tidyr&quot; %in% rownames(installed.packages()))){ install.packages(&quot;tidyr&quot;) } if (!(&quot;dplyr&quot; %in% rownames(installed.packages()))){ install.packages(&quot;dplyr&quot;) } if (!(&quot;magrittr&quot; %in% rownames(installed.packages()))){ install.packages(&quot;magrittr&quot;) } if (!(&quot;viridis&quot; %in% rownames(installed.packages()))){ install.packages(&quot;viridis&quot;) } "],["introduction-to-the-tidyverse.html", "7 Introduction to the tidyverse 7.1 Defining tidy data 7.2 Pipes: combining tidyverse functions 7.3 Transforming data 7.4 Summarizing data", " 7 Introduction to the tidyverse All of the functions used up to this point were part of base R. They are built into the R language itself. Base R is extremely powerful, but R is also extensible. The tidyverse is a collection of packages by the creators of RStudio that share an approach to data science. The authors model data science like this: Data science life cycle The tidyverse packages replace some of the base R functions with alternatives that are intended to be more user friendly for data scientists who are following this life cycle. We will only be covering a few of the packages from the tidyverse. library(tidyr) library(dplyr) library(magrittr) 7.1 Defining tidy data In “tidy” data, every column is a variable, every row is an observation, and every cell contains a single observation. Is the birthweight data frame tidy? Why or why not? birthweight ## ID birth.date location length birthweight head.circumference ## 1 1107 1/25/1967 General 52 3.23 36 ## 2 697 2/6/1967 Silver Hill 48 3.03 35 ## 3 1683 2/14/1967 Silver Hill 53 3.35 33 ## 4 27 3/9/1967 Silver Hill 53 3.55 37 ## 5 1522 3/13/1967 Memorial 50 2.74 33 ## 6 569 3/23/1967 Memorial 50 2.51 35 ## 7 365 4/23/1967 Memorial 52 3.53 37 ## 8 808 5/5/1967 Silver Hill 48 2.92 33 ## 9 1369 6/4/1967 Silver Hill 49 3.18 34 ## 10 1023 6/7/1967 Memorial 52 3.00 35 ## 11 822 6/14/1967 Memorial 50 3.42 35 ## 12 1272 6/20/1967 Memorial 53 2.75 32 ## 13 1262 6/25/1967 Silver Hill 53 3.19 34 ## 14 575 7/12/1967 Memorial 50 2.78 30 ## 15 1016 7/13/1967 Silver Hill 53 4.32 36 ## 16 792 9/7/1967 Memorial 53 3.64 38 ## 17 820 10/7/1967 General 52 3.77 34 ## 18 752 10/19/1967 General 49 3.32 36 ## 19 619 11/1/1967 Memorial 52 3.41 33 ## 20 1764 12/7/1967 Silver Hill 58 4.57 39 ## 21 1081 12/14/1967 Silver Hill 54 3.63 38 ## 22 516 1/8/1968 Silver Hill 47 2.66 33 ## 23 272 1/10/1968 Memorial 52 3.86 36 ## 24 321 1/21/1968 Silver Hill 48 3.11 33 ## 25 1636 2/2/1968 Silver Hill 51 3.93 38 ## 26 1360 2/16/1968 General 56 4.55 34 ## 27 1388 2/22/1968 Memorial 51 3.14 33 ## 28 1363 4/2/1968 General 48 2.37 30 ## 29 1058 4/24/1968 Silver Hill 53 3.15 34 ## 30 755 4/25/1968 Memorial 53 3.20 33 ## 31 462 6/19/1968 Silver Hill 58 4.10 39 ## 32 300 7/18/1968 Silver Hill 46 2.05 32 ## 33 1088 7/24/1968 General 51 3.27 36 ## 34 57 8/12/1968 Memorial 51 3.32 38 ## 35 553 8/17/1968 Silver Hill 54 3.94 37 ## 36 1191 9/7/1968 General 53 3.65 33 ## 37 431 9/16/1968 Silver Hill 48 1.92 30 ## 38 1313 9/27/1968 Silver Hill 43 2.65 32 ## 39 1600 10/9/1968 General 53 2.90 34 ## 40 532 10/25/1968 General 53 3.59 34 ## 41 223 12/11/1968 General 50 3.87 33 ## 42 1187 12/19/1968 Silver Hill 53 4.07 38 ## weeks.gestation smoker maternal.age maternal.cigarettes maternal.height ## 1 38 FALSE 31 0 164 ## 2 39 FALSE 27 0 162 ## 3 41 FALSE 27 0 164 ## 4 41 TRUE 37 25 161 ## 5 39 TRUE 21 17 156 ## 6 39 TRUE 22 7 159 ## 7 40 TRUE 26 25 170 ## 8 34 FALSE 26 0 167 ## 9 38 TRUE 31 25 162 ## 10 38 TRUE 30 12 165 ## 11 38 FALSE 20 0 157 ## 12 40 TRUE 37 50 168 ## 13 41 TRUE 27 35 163 ## 14 37 TRUE 19 7 165 ## 15 40 FALSE 19 0 171 ## 16 40 TRUE 20 2 170 ## 17 40 FALSE 24 0 157 ## 18 40 TRUE 27 12 152 ## 19 39 TRUE 23 25 181 ## 20 41 TRUE 32 12 173 ## 21 38 FALSE 18 0 172 ## 22 35 TRUE 20 35 170 ## 23 39 TRUE 30 25 170 ## 24 37 FALSE 28 0 158 ## 25 38 FALSE 29 0 165 ## 26 44 FALSE 20 0 162 ## 27 41 TRUE 22 7 160 ## 28 37 TRUE 20 7 163 ## 29 40 FALSE 29 0 167 ## 30 41 FALSE 21 0 155 ## 31 41 FALSE 35 0 172 ## 32 35 TRUE 41 7 166 ## 33 40 FALSE 24 0 168 ## 34 39 TRUE 23 17 157 ## 35 42 FALSE 24 0 175 ## 36 42 FALSE 21 0 165 ## 37 33 TRUE 20 7 161 ## 38 33 FALSE 24 0 149 ## 39 39 FALSE 19 0 165 ## 40 40 TRUE 31 12 163 ## 41 45 TRUE 28 25 163 ## 42 44 FALSE 20 0 174 ## maternal.prepregnant.weight paternal.age paternal.education ## 1 57 NA NA ## 2 62 27 14 ## 3 62 37 14 ## 4 66 46 NA ## 5 53 24 12 ## 6 52 23 14 ## 7 62 30 10 ## 8 64 25 12 ## 9 57 32 16 ## 10 64 38 14 ## 11 48 22 14 ## 12 61 31 16 ## 13 51 31 16 ## 14 60 20 14 ## 15 62 19 12 ## 16 59 24 12 ## 17 50 31 16 ## 18 48 37 12 ## 19 69 23 16 ## 20 70 38 14 ## 21 50 20 12 ## 22 57 23 12 ## 23 78 40 16 ## 24 54 39 10 ## 25 61 NA NA ## 26 57 23 10 ## 27 53 24 16 ## 28 47 20 10 ## 29 60 30 16 ## 30 55 25 14 ## 31 58 31 16 ## 32 57 37 14 ## 33 53 29 16 ## 34 48 NA NA ## 35 66 30 12 ## 36 61 21 10 ## 37 50 20 10 ## 38 45 26 16 ## 39 57 NA NA ## 40 49 41 12 ## 41 54 30 16 ## 42 68 26 14 ## paternal.cigarettes paternal.height low.birthweight geriatric.pregnancy ## 1 NA NA FALSE FALSE ## 2 0 178 FALSE FALSE ## 3 0 170 FALSE FALSE ## 4 0 175 FALSE TRUE ## 5 7 179 FALSE FALSE ## 6 25 NA TRUE FALSE ## 7 25 181 FALSE FALSE ## 8 25 175 FALSE FALSE ## 9 50 194 FALSE FALSE ## 10 50 180 FALSE FALSE ## 11 0 179 FALSE FALSE ## 12 0 173 FALSE TRUE ## 13 25 185 FALSE FALSE ## 14 0 183 FALSE FALSE ## 15 0 183 FALSE FALSE ## 16 12 185 FALSE FALSE ## 17 0 173 FALSE FALSE ## 18 25 170 FALSE FALSE ## 19 2 181 FALSE FALSE ## 20 25 180 FALSE FALSE ## 21 7 172 FALSE FALSE ## 22 50 186 TRUE FALSE ## 23 50 178 FALSE FALSE ## 24 0 171 FALSE FALSE ## 25 NA NA FALSE FALSE ## 26 35 179 FALSE FALSE ## 27 12 176 FALSE FALSE ## 28 35 185 TRUE FALSE ## 29 NA 182 FALSE FALSE ## 30 25 183 FALSE FALSE ## 31 25 185 FALSE TRUE ## 32 25 173 TRUE TRUE ## 33 0 181 FALSE FALSE ## 34 NA NA FALSE FALSE ## 35 0 184 FALSE FALSE ## 36 25 185 FALSE FALSE ## 37 35 180 TRUE FALSE ## 38 0 169 TRUE FALSE ## 39 NA NA FALSE FALSE ## 40 50 191 FALSE FALSE ## 41 0 183 FALSE FALSE ## 42 25 189 FALSE FALSE ## month day year ## 1 1 25 1967 ## 2 2 6 1967 ## 3 2 14 1967 ## 4 3 9 1967 ## 5 3 13 1967 ## 6 3 23 1967 ## 7 4 23 1967 ## 8 5 5 1967 ## 9 6 4 1967 ## 10 6 7 1967 ## 11 6 14 1967 ## 12 6 20 1967 ## 13 6 25 1967 ## 14 7 12 1967 ## 15 7 13 1967 ## 16 9 7 1967 ## 17 10 7 1967 ## 18 10 19 1967 ## 19 11 1 1967 ## 20 12 7 1967 ## 21 12 14 1967 ## 22 1 8 1968 ## 23 1 10 1968 ## 24 1 21 1968 ## 25 2 2 1968 ## 26 2 16 1968 ## 27 2 22 1968 ## 28 4 2 1968 ## 29 4 24 1968 ## 30 4 25 1968 ## 31 6 19 1968 ## 32 7 18 1968 ## 33 7 24 1968 ## 34 8 12 1968 ## 35 8 17 1968 ## 36 9 7 1968 ## 37 9 16 1968 ## 38 9 27 1968 ## 39 10 9 1968 ## 40 10 25 1968 ## 41 12 11 1968 ## 42 12 19 1968 7.2 Pipes: combining tidyverse functions The tidyverse employs piping to send the output of one function to another function, rather than the nesting used in base r. The “pipe” is written with a greater than symbol sandwiched between two percent signs, like this: %&gt;%. experiment %&gt;% filter(low.birthweight == TRUE) %&gt;% select(birth.date, length, birthweight, smoker) ## birth.date length birthweight smoker ## 1 7/18/1968 46 2.05 TRUE ## 2 9/16/1968 48 1.92 TRUE ## 3 1/8/1968 47 2.66 TRUE ## 4 3/23/1967 50 2.51 TRUE ## 5 9/27/1968 43 2.65 FALSE ## 6 4/2/1968 48 2.37 TRUE # equivalent to: experiment[experiment$low.birthweight == TRUE, c(&quot;birth.date&quot;, &quot;length&quot;, &quot;birthweight&quot;, &quot;smoker&quot;)] ## birth.date length birthweight smoker ## 5 7/18/1968 46 2.05 TRUE ## 8 9/16/1968 48 1.92 TRUE ## 10 1/8/1968 47 2.66 TRUE ## 13 3/23/1967 50 2.51 TRUE ## 33 9/27/1968 43 2.65 FALSE ## 35 4/2/1968 48 2.37 TRUE The separate() function makes the conversion of the “birth.date” column into “month,” “day,” and “year” trivial. experiment %&gt;% filter(low.birthweight == TRUE) %&gt;% select(birth.date, length, birthweight, smoker) %&gt;% separate(col = birth.date, sep = &quot;[/]&quot;, into = c(&quot;month&quot;, &quot;day&quot;, &quot;year&quot;)) ## month day year length birthweight smoker ## 1 7 18 1968 46 2.05 TRUE ## 2 9 16 1968 48 1.92 TRUE ## 3 1 8 1968 47 2.66 TRUE ## 4 3 23 1967 50 2.51 TRUE ## 5 9 27 1968 43 2.65 FALSE ## 6 4 2 1968 48 2.37 TRUE 7.3 Transforming data The mutate() function adds a new column based on data contained in the existing columns. experiment %&gt;% filter(low.birthweight == TRUE) %&gt;% select(birth.date, length, birthweight, smoker) %&gt;% mutate(d = birthweight / length) ## birth.date length birthweight smoker d ## 1 7/18/1968 46 2.05 TRUE 0.04456522 ## 2 9/16/1968 48 1.92 TRUE 0.04000000 ## 3 1/8/1968 47 2.66 TRUE 0.05659574 ## 4 3/23/1967 50 2.51 TRUE 0.05020000 ## 5 9/27/1968 43 2.65 FALSE 0.06162791 ## 6 4/2/1968 48 2.37 TRUE 0.04937500 7.4 Summarizing data The group_by() and summarize() functions apply a function to a group defined by one or more categorical variables. experiment %&gt;% group_by(smoker) %&gt;% summarize(mean.birthweight = mean(birthweight)) ## # A tibble: 2 × 2 ## smoker mean.birthweight ## &lt;lgl&gt; &lt;dbl&gt; ## 1 FALSE 3.51 ## 2 TRUE 3.13 experiment %&gt;% group_by(smoker, low.birthweight) %&gt;% summarize(mean.birthweight = mean(birthweight)) ## `summarise()` has grouped output by &#39;smoker&#39;. You can override using the `.groups` argument. ## # A tibble: 4 × 3 ## # Groups: smoker [2] ## smoker low.birthweight mean.birthweight ## &lt;lgl&gt; &lt;lgl&gt; &lt;dbl&gt; ## 1 FALSE FALSE 3.55 ## 2 FALSE TRUE 2.65 ## 3 TRUE FALSE 3.38 ## 4 TRUE TRUE 2.30 To change the order of rows, use arrange(). To return one or more specified rows, use slice(). experiment %&gt;% group_by(smoker) %&gt;% select(birthweight, length, head.circumference, weeks.gestation) %&gt;% slice_max(order_by = birthweight, n = 5) ## Adding missing grouping variables: `smoker` ## # A tibble: 10 × 5 ## # Groups: smoker [2] ## smoker birthweight length head.circumference weeks.gestation ## &lt;lgl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 FALSE 4.55 56 34 44 ## 2 FALSE 4.32 53 36 40 ## 3 FALSE 4.1 58 39 41 ## 4 FALSE 4.07 53 38 44 ## 5 FALSE 3.94 54 37 42 ## 6 TRUE 4.57 58 39 41 ## 7 TRUE 3.87 50 33 45 ## 8 TRUE 3.86 52 36 39 ## 9 TRUE 3.64 53 38 40 ## 10 TRUE 3.59 53 34 40 The utility of the pivot_longer() function will become more evident during visualization. experiment %&gt;% filter(low.birthweight == TRUE) %&gt;% select(smoker, `miR-16`, `miR-21`, `miR-146a`, `miR-182`) %&gt;% pivot_longer(cols = c(`miR-16`, `miR-21`, `miR-146a`, `miR-182`), names_to = &quot;gene&quot;, values_to = &quot;expression&quot;) ## # A tibble: 24 × 3 ## smoker gene expression ## &lt;lgl&gt; &lt;chr&gt; &lt;int&gt; ## 1 TRUE miR-16 60 ## 2 TRUE miR-21 48 ## 3 TRUE miR-146a 89 ## 4 TRUE miR-182 65 ## 5 TRUE miR-16 70 ## 6 TRUE miR-21 51 ## 7 TRUE miR-146a 84 ## 8 TRUE miR-182 48 ## 9 TRUE miR-16 61 ## 10 TRUE miR-21 51 ## # … with 14 more rows "],["visualizations.html", "8 Visualizations 8.1 Histograms and density plots 8.2 Bar charts 8.3 Box and violin plots 8.4 Scatter plots 8.5 Heat maps", " 8 Visualizations The ggplot2 library is an extremely popular visualization package that provides an interface for extremely fine control over graphics for plotting. It is used by a number of of other popular packages in their built-in plotting functions. It provides a “grammar of graphics” that is quite useful to know. A note about accessibility: The default colors automatically selected by ggplot2 are not very user-friendly. Colors are chosen by sampling evenly hues on the color wheel. Because of this behavior, all of the colors have similar intensity, which means that they do not work in a gray-scale printing, and may be difficult to distinguish for users with atypical color vision. There are many resources for selecting color palettes online. Here are just a few: Viridis ColorBrewer colorBlindness Guide Digital Accessibility Blog entry library(ggplot2) library(viridis) ?viridis locations.palette &lt;- viridis(3) smoking.palette &lt;- inferno(2, begin = 0.5, direction = -1) years.palette &lt;- mako(2, begin = 0.4, end = 0.9, direction = -1) genes.palette &lt;- plasma(4) 8.1 Histograms and density plots ggplot(data = experiment, mapping = aes(x = birthweight)) + geom_histogram(binwidth = 0.25) + facet_wrap(~location, nrow = 3) + labs(x = &quot;weight (kg)&quot;, y = &quot;births&quot;) + theme_bw() ggplot(data = experiment, mapping = aes(x = birthweight)) + geom_density() + theme_bw() ggplot(data = experiment, mapping = aes(x = birthweight)) + geom_density() + facet_wrap(~location, nrow = 3) + theme_bw() ggplot(data = experiment, mapping = aes(x = birthweight, color = location)) + geom_density() + scale_color_manual(values = locations.palette) + theme_bw() ggplot(data = experiment, mapping = aes(x = birthweight, color = as.factor(year))) + geom_density() + facet_wrap(~as.factor(year), nrow = 1) + scale_color_manual(values = years.palette) + theme_bw() 8.2 Bar charts ggplot(data = experiment, mapping = aes(x = as.factor(month), fill = as.factor(year))) + geom_bar(position = position_dodge2(preserve = &quot;single&quot;)) + labs(x = &quot;Birth month&quot;, y = &quot;Samples&quot;, fill = &quot;Year&quot;, caption = &quot;Colors: https://personal.sron.nl/~pault/&quot;) + scale_fill_manual(values = years.palette) + theme_bw() ggplot(data = experiment, mapping = aes(x = maternal.cigarettes, fill = location)) + geom_bar(position = position_dodge2(preserve = &quot;single&quot;)) + labs(x = &quot;Maternal Smoking (cigarettes / day)&quot;, y = &quot;Samples&quot;, fill = &quot;Collection Site&quot;) + scale_fill_manual(values = locations.palette) + facet_wrap(~year) + theme_bw() 8.3 Box and violin plots experiment %&gt;% pivot_longer(cols = c(22:25), names_to = &quot;gene.id&quot;, values_to = &quot;expression&quot;) %&gt;% ggplot(mapping = aes(x = smoker, y = expression, fill = smoker)) + geom_boxplot() + facet_wrap(~ gene.id, nrow = 2) + scale_fill_manual(values = smoking.palette) + scale_x_discrete(labels = c(&quot;non-smoker&quot;, &quot;smoker&quot;)) + guides(fill = &quot;none&quot;) + labs(y = &quot;miRNA expression&quot;) + theme_bw() + theme(axis.title.x = element_blank()) experiment %&gt;% pivot_longer(cols = c(22:25), names_to = &quot;gene.id&quot;, values_to = &quot;expression&quot;) %&gt;% ggplot(mapping = aes(x = smoker, y = expression, fill = smoker)) + geom_violin() + scale_fill_manual(values = smoking.palette) + scale_x_discrete(labels = c(&quot;non-smoker&quot;, &quot;smoker&quot;)) + facet_wrap(~ gene.id, nrow = 2) + guides(fill = &quot;none&quot;) + labs(x = &quot;Maternal tobacco use in pregnancy&quot;, y = &quot;miRNA expression&quot;) + theme_bw() 8.4 Scatter plots experiment %&gt;% pivot_longer(cols = c(22:25), names_to = &quot;gene.id&quot;, values_to = &quot;expression&quot;) %&gt;% ggplot(mapping = aes(x = maternal.cigarettes, y = expression, color = location, shape = low.birthweight)) + geom_point() + scale_color_manual(values = locations.palette) + scale_shape_manual(values = c(16, 17), labels = c(&quot;&lt; 2.72 kg&quot;, &quot;&gt;= 2.72 kg&quot;)) + facet_wrap(~ gene.id, nrow = 2) + labs(x = &quot;Maternal cigarettes / day&quot;, y = &quot;miRNA expression&quot;) + theme_bw() + theme(legend.title = element_blank()) experiment %&gt;% filter(weeks.gestation &gt;= 38, weeks.gestation &lt;= 40) %&gt;% pivot_longer(cols = c(22:25), names_to = &quot;gene.id&quot;, values_to = &quot;expression&quot;) %&gt;% ggplot(mapping = aes(x = maternal.cigarettes, y = expression, color = gene.id, shape = low.birthweight)) + geom_point() + scale_color_manual(values = genes.palette) + scale_shape_manual(values = c(16, 17), labels = c(&quot;&lt; 2.72 kg&quot;, &quot;&gt;= 2.72 kg&quot;)) + facet_wrap(~ weeks.gestation, nrow = 1) + labs(x = &quot;Maternal cigarettes / day&quot;, y = &quot;miRNA expression&quot;) + theme_bw() + theme(legend.title = element_blank()) ggplot(experiment, mapping = aes(x = weeks.gestation, y = birthweight, color = smoker)) + geom_point() + scale_color_manual(values = smoking.palette, labels = c(&quot;non-smoking&quot;, &quot;smoking&quot;)) + labs(x = &quot;Gestational age at birth (weeks)&quot;, y = &quot;Birth weight&quot;) + theme_bw() + theme(legend.title = element_blank()) experiment %&gt;% filter(smoker == TRUE) %&gt;% ggplot(mapping = aes(x = maternal.cigarettes, y = weeks.gestation, color = birthweight)) + geom_point() + labs(x = &quot;Maternal cigarettes / day&quot;, y = &quot;Gestational age at birth (weeks)&quot;, color = &quot;Birth weight (kg)&quot;) + scale_color_viridis(option = &quot;inferno&quot;, begin = 0.4) + theme_bw() ggplot(experiment, mapping = aes(x = weeks.gestation, y = birthweight, color = smoker)) + geom_point() + geom_smooth(alpha = 0.2) + labs(x = &quot;Gestational age at birth (weeks)&quot;, y = &quot;Birth weight (kg)&quot;, color = &quot;Maternal tobacco use&quot;, caption = &quot;Birthweight increases with gestational age for infants born to both\\nsmokers and non-smokers.&quot;) + scale_color_manual(values = smoking.palette) + theme_bw() + theme(plot.caption = element_text(hjust = 0)) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 8.5 Heat maps "],["troubleshooting.html", "9 Troubleshooting", " 9 Troubleshooting Common errors: file is not in the right place, or is incorrectly named improperly formatted files missing values spelling errors incorrectly named parameters "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
